{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","Fragment","CssBaseline","Grid","container","direction","justify","alignItems","style","backgroundColor","height","text","withStyles","card","maxWidth","media","classes","poster","movie","Poster","Card","className","elevation","CardActionArea","CardMedia","image","title","Title","CardContent","Typography","gutterBottom","variant","component","noWrap","color","Year","root","padding","margin","display","alignSelf","input","flex","iconButton","useState","searchValue","setSearchValue","Container","spacing","item","xs","sm","Paper","InputBase","placeholder","inputProps","value","onChange","e","preventDefault","target","search","type","IconButton","aria-label","onClick","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Search","Response","Error","map","index","key","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e482039f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CssBaseline, Grid } from '@material-ui/core';\r\n\r\nconst Header = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ backgroundColor: \"#cfe8fc\", height: \"20vh\" }}>\r\n          <h1>{props.text}</h1>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { CardActionArea, Typography, Button, CardActions, CardMedia, CardContent, Card } from '@material-ui/core';\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 400\r\n  }\r\n};\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n  \"https://m.media-amazon.com/images/G/01/imdb/images/nopicture/medium/film-3385785534._CB483791896_.png\";\r\n\r\nconst Movie = (props) => {\r\n  const {classes} = props;\r\n  const poster = props.movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : props.movie.Poster;\r\n\r\n  return (\r\n    <Card className={classes.card} elevation=\"3\">\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={poster}\r\n          title={props.movie.Title}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" noWrap>\r\n            {props.movie.Title}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            ({props.movie.Year})\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n\r\n    /*\r\n    <div className=\"movie\">\r\n      <h2>{movie.Title}</h2>\r\n      <div>\r\n        <img\r\n          width=\"200\"\r\n          alt={`The movie titled: ${movie.Title}`}\r\n          src={poster}\r\n        />\r\n      </div>\r\n      <p>({movie.Year})</p>\r\n  <p>{movie.plot}</p>\r\n    </div>*/\r\n  );\r\n};\r\n\r\nMovie.propTypes = {\r\n  classes: PropTypes.object,\r\n  movie : PropTypes.object\r\n};\r\n\r\nexport default withStyles(styles)(Movie);\r\n","import React, { useState } from \"react\";\r\nimport { Paper, IconButton, InputBase, Container, Grid } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n  root: {\r\n    padding: \"2px 4px\",\r\n    margin: \"20px 0\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    alignSelf: \"center\",\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    padding: 5\r\n  },\r\n  iconButton: {\r\n    padding: 10\r\n  },\r\n};\r\n\r\nconst Search = props => {\r\n  const { classes } = props;\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const handleSearchInputChanges = e => {\r\n    e.preventDefault();\r\n    setSearchValue(e.target.value);\r\n    e.target.value ? props.search(e.target.value) : props.search(\"man\");\r\n  }\r\n  \r\n  const resetInputField = () => {\r\n    setSearchValue(\"\");\r\n  };\r\n\r\n  const callSearchFunction = e => {\r\n    e.preventDefault();\r\n    searchValue ? props.search(searchValue) : props.search(\"man\");\r\n    resetInputField();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper component=\"form\" className={classes.root}>\r\n            <InputBase\r\n              className={classes.input}\r\n              placeholder=\"Search a movie title\"\r\n              inputProps={{ \"aria-label\": \"Search a movie title\" }}\r\n              value={searchValue}\r\n              onChange={handleSearchInputChanges}\r\n              type=\"text\"\r\n            />\r\n            <IconButton\r\n              type=\"submit\"\r\n              className={classes.iconButton}\r\n              aria-label=\"search\"\r\n              onClick={callSearchFunction}\r\n              value=\"SEARCH\"\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nSearch.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default  withStyles(styles)(Search);\r\n","import React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nimport { Grid, Container } from \"@material-ui/core\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n  return (\n    <div className=\"App\">\n      <Header text=\"MOVIE SEARCH\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <Container>\n        <Grid container spacing={2} className=\"movies\" alignItems=\"stretch\">\n          {loading && !errorMessage ? (\n            <span>loading...</span>\n          ) : errorMessage ? (\n            <div className=\"errorMessage\">{errorMessage}</div>\n          ) : (\n            movies.map((movie, index) => (\n              <Grid key={`${index}-${movie.Title}`} item xs={12} sm={6} lg={3}>\n                <Movie movie={movie} />\n              </Grid>\n            ))\n          )}\n        </Grid>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\"; // this changed\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}